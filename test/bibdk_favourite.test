<?php

/**
 * @file
 * Test bibdk favourite implementation.
 */
// test deletion of profile type
/**
 * Check that basic user login functionality works.
 */
class bibdkFavouriteTest extends DrupalWebTestCase {

  public function setUp() {
    module_enable(array('openagency_webservice_mockup'));
    parent::setUp(array('ding_user', 'bibdk_test_provider', 'ting_agency', 'openagency_webservice_mockup'));
    //$this->standard_user = $this->drupalCreateUser();
    variable_set('agency_search_xsd_url',$this->getAbsoluteUrl('/openagency_webservice/openagency.xsd'));
    variable_set('agency_search_url',  $this->getAbsoluteUrl('/openagency_webservice/'));
    // allow you to log messages with error_log() to "sites/default/files/test.log"
    $logfile = conf_path() . '/files/test.log';
    ini_set('log_errors', 1);
    ini_set('error_log', $logfile);

  }

  /**
   * Info for this test case
   */
  public function getInfo() {
    return array(
      'name' => 'Bibdk favourite',
      'description' => t('Test create/delete of bibdk_favourite_list profile2 type'),
      'group' => 'Bibliotek.dk - Favourites',
    );
  }

// check if profiletype is created after module has been enabled
// and user logs in.
  function testCheckProfileType() {
    //first disable module
    module_disable(array('bibdk_favourite'));
    $edit['name'] = 'testuser';
    $edit['pass'] = 'password';
    // we have to submit the user_login_block form to log in as provider user
    $this->drupalPost('user/login', $edit, t('Log in'), array(), array(), 'user-login', NULL);
    $this->drupalGet('user/2');
    $this->assertNoLink('Favourites');
    // enable module
    module_enable(array('bibdk_favourite'));
    menu_rebuild();

    global $base_url;
  //  variable_set('agency_search_url', $base_url . '/openagency_webservice/');
    //variable_set('agency_search_url', 'http://openagency.addi.dk/2.8/');
    $this->drupalGet('user/2');
    $this->assertLink('Favourites');
    $this->clickLink('Favourites');
    // assert that profile tab is shown
   // $this->assertLink('set_as_favourite');
   // $this->assertLink('Find library');
   // $this->assertText('Copenhagen Townhall', 'profile tab is set');
  }
  

  // Check bibdk_favourite_parse_borchk for a 'not_ok' user request
  // used when choosing personal data in favourite libraries
  function test_bibdk_favourite_borchk_bad_user() {
    $path = drupal_get_path('module', 'bibdk_favourite');
   
    $filename = $path.'/test/borchck_not_ok.xml';
    $ret_not_ok = file_get_contents($filename);
    //Can be used for testprint to test.log 
    //error_log(print_r(bibdk_favourite_parse_borchk($ret_not_ok),1));
    $res_not_ok = bibdk_favourite_parse_borchk($ret_not_ok);
    $this->assertTrue($res_not_ok['status'] == 'error' ,'Parse file borchck_not_ok is OK');
    
  }
  
  // Check bibdk_favourite_parse_borchk for a 'ok' user request
  // used when choosing personal data in favourite libraries
  function test_bibdk_favourite_borchk_good_user() {
    $path = drupal_get_path('module', 'bibdk_favourite');
    
    $filename = $path.'/test/borchck_ok.xml';
    $ret_ok = file_get_contents($filename);
    //Can be used for testprint to test.log
    //error_log(print_r(bibdk_favourite_parse_borchk($ret_ok),1));
    $res_ok= bibdk_favourite_parse_borchk($ret_ok);
    $this->assertTrue($res_ok['status'] == 'ok' ,'Parse file borchck_ok is OK');
    
  }
  
  
}

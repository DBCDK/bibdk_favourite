<?php

/**
 * @file
 * Test bibdk favourite implementation.
 */
// test deletion of profile type
/**
 * Check that basic user login functionality works.
 */
class bibdkFavouriteTest extends DrupalWebTestCase {

  function setUp() {
    $this->profile = 'minimal';
    parent::setUp(array('ding_user', 'bibdk_test_provider'));
    // variable_set('bibdk_provider_webservice_url','http://guesstimate.dbc.dk/~pjo/webservices/OpenUserInfo/trunk/server.php');
    // variable_set('bibdk_provider_security_code','testhest');
  }

  /**
   * Info for this test case
   */
  public function getInfo() {
    return array(
      'name' => 'Bibdk favourite',
      'description' => t('Test the functionality of Bibdk favourites'),
      'group' => 'bibliotek.dk',
    );
  }

  /* public function testDeleteFavourite() {
    module_disable('bibdk_provider');
    //$edit['name'] = 'pjohans@gmail.com';
    //$edit['pass'] = '1111';

    $edit['name'] = 'validUser';
    $edit['pass'] = '123456';

    $this->drupalPost('user/login', $edit, t('Log in'), array(), array(), 'user-login', NULL);
    $this->drupalGet('user/2/edit/bibdk_favourite_list');
    // assert that delete button is on page
    $this->assertField('order-agency','order-agency class has been set');
    }

    public function testLoginButtonExists() {
    module_disable('bibdk_provider');
    $this->drupalGet('user/login');
    $this->assertFieldByName("op", t('Log in'), 'login button exists');
  }

  public function testFavouritesExists() {

    $edit['name'] = 'hest@gmail.com';
    $edit['pass'] = 'hest';
    $this->drupalPost('user/login', $edit, t('Log in'), array(), array(), 'user-login', NULL);

  }

  // check if profiletype is created after module has been enabled
  // and user logs in.
  function testCheckProfileType() {

    //first disable module
    module_disable(array('bibdk_favourite'));
    // assert that profiletype does not exist
    $profile_type = 'bibdk_favourite_list';
    $type = profile2_get_types($profile_type);
    $this->assertFalse($type);

    // enable module
    module_enable(array('bibdk_favourite'));
    // we have to submit the user_login_block form to log in as provider user
    $edit['name'] = 'pjohans@gmail.com';
    $edit['pass'] = '1111';
    $this->drupalPost('user/login', $edit, t('Log in'), array(), array(), 'user-login', NULL);

    // assert that the profiletype has been created when user logs in
    $type = profile2_get_types($profile_type);
    $this->assertEqual($type->type, $profile_type);
  }

}

class bibdkFavouriteTestSetFavourite extends DrupalWebTestCase {

  function setUp() {
    $this->profile = 'bibdk';
    parent::setUp(array('openagency_webservice_mockup','bibdk_test_provider'));
    // variable_set('bibdk_provider_webservice_url','http://guesstimate.dbc.dk/~pjo/webservices/OpenUserInfo/trunk/server.php');
    // variable_set('bibdk_provider_security_code','testhest');
  }

  /**
   * Info for this test case
   */
  public function getInfo() {
    return array(
      'name' => 'check favourite agency',
      'description' => t('Test the functionality of Bibdk favourites'),
      'group' => 'bibliotek.dk',
    );
  }
  
  public function testAndSetAgencyUrlHest() {
    $url = variable_get('agency_search_url');
    $this->assertNull($url, 'No URL set for Open Agency yet');
    global $base_url;
    variable_set('agency_search_url', $base_url.'/modules/ting_agency/mockups/openagency/');
    $newUrl = variable_get('agency_search_url');
    $this->assertNotNull($newUrl, 'URL to mockup set: ' . $newUrl);
   
    $this->drupalPost('', array('openagency_query' => 'als'), t('Search'), array(), array(), 'bibdk-vejviser-form');
    $this->assertText('Als Bibliotek', t('Agency search result correctly shown'));
  }
  
  public function testHest() {
    $this->assertTrue(TRUE);
  }

}

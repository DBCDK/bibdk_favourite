<?php

/**
 * Implements hook_add_to_vejviser (@see bibdk_vejviser.module)
 * */
function bibdk_favourite_add_to_vejviser($branch) {
  $ret = drupal_get_form('bibdk_favourite_select_form', $branch);
  return drupal_render($ret);
}

/** \brief button to add a library to favourites
 * @param type $form
 * @param type $form_state
 * @return string
 */
function bibdk_favourite_select_form($form, $form_state) {
  $form['favourite_button'] = array(
    '#type' => 'submit',
    '#value' => t('TilfÃ¸j til favoritbiblioteker'),
    '#ajax' => array(
      'callback' => 'bibdk_favourite_ajax_add_favourite',
    ),
    '#attributes' => array(
      'class' => array('btn-add-library'),
    ),
  );
  return $form;
}

/**
 * Ajax callback function
 * add favourite to session
 * set a message
 * */
function bibdk_favourite_ajax_add_favourite($form, $form_state) {
  $branch = $form_state['build_info']['args'][0];

  $commands = array();
  $response = _bibdk_favourite_save_on_webservice($branch);
  if ($response) {
    bibdk_favourite_add_favourite_to_session($branch);
    $bibname = $_SESSION['bibdk_favourites'][$branch->branchId]->branchName;
    $text = t('@bibname has been added to your favourite libraries', array('@bibname' => $bibname));
  }
  else {
    $text = _bibdk_favourite_set_error_text($branchId);
  }
  $selector = '.messages_' . $branch->branchId;
  drupal_set_message($text);
  $commands[] = ajax_command_replace($selector, theme('status_messages'));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Add favourite library to sesssion
 * */
function bibdk_favourite_add_favourite_to_session($branch, $save = FALSE) {
  if (!isset($_SESSION)) {
    drupal_session_initialize();
    $_SESSION['bibdk_favourites'] = array();
  }

  // @TODO; save on webservice
  if (!isset($_SESSION['bibdk_favourites'][$branch->branchId])) {
    $_SESSION['bibdk_favourites'][$branch->branchId] = serialize($branch);
    //try to save
    if ($save) {
      $response = _bibdk_favourite_save_on_webservice($branch);
    }
  }
}

/** \brief delete user on webservice
 *
 * @global $user
 * @param  $branchId
 * @return FALSE if user is not logged in or is not ding_provider_user
 * or something goes wrong. TRUE if all went well
 */
function _bibdk_favourite_delete_on_webservice($branchId) {
  global $user;
  try {
    $creds = ding_user_get_creds($user);
  } catch (Exception $e) {
    return FALSE;
  }
  $response = ding_provider_invoke('user', 'delete_favourite', $creds['name'], $branchId);
  return $response;
}

/**
 * Implements hook_form_FORM_ID_alter
 *
 * @param array $form
 * @param type $form_state
 */
function bibdk_favourite_form_profile2_form_alter(&$form, &$form_state) {
  // add a submit function
  $form['#submit'][] = 'bibdk_favourite_profile2_submit';
}

/** \brief submit handler for profile2 form
 * clear messages and set a proper one
 *  * @param type $form
 * @param type $form_state
 */
function bibdk_favourite_profile2_submit($form, $form_state) {
  //clear session
  if (isset($_SESSION['bibdk_favourites'])) {
    unset($_SESSION['bibdk_favourites']);
  }
  // clear message stack
  drupal_get_messages();
  drupal_set_message(t('page_refreshed', array(), array('context' => 'bibdk_favourite')));
}

/** \brief save user on webservice
 *
 * @global $user
 * @param  $branch
 * @return FALSE if user is not logged in or is not ding_provider_user
 * or something goes wrong. TRUE if all went well
 */
function _bibdk_favourite_save_on_webservice($branch) {
  // check if user is logged in and if so if user is provider user
  global $user;
  try {
    $creds = ding_user_get_creds($user);
  } catch (Exception $e) {
    return FALSE;
  }
  $response = ding_provider_invoke('user', 'add_favourite', $creds['name'], $branch->branchId);
  return $response;
}

/** \ Delete favourite from SESSION and on webservice
 *
 * @param type $branchId
 * @return boolean
 */
function bibdk_favourite_delete_favourite_from_session($branchId) {
  $ret = TRUE;
  $ret = _bibdk_favourite_delete_on_webservice($branchId);
  if ($ret && isset($_SESSION['bibdk_favourites'][$branchId])) {
    unset($_SESSION['bibdk_favourites'][$branchId]);
  }
  return $ret;
}

/**
 * Implememts hook_user_profile_tabs (@see ding_user.module)
 * */
function bibdk_favourite_user_profile2_tabs() {
  $ret->label = t('favourites');
  //$ret->form = 'bibdk_favourite_form_view_items_from_session';
  $ret->form = bibdk_favourite_get_forms();
  //'bibdk_favourite_get_forms';
  $ret->type = 'bibdk_favourite_list';

  return $ret;
}

function _bibdk_favourite_set_agencies() {
  // try to get from webservice
  $agencies = _bibdk_favourite_get_from_webservice();
  if (!empty($agencies)) {
    // add agencies to session
    foreach ($agencies as $branch) {
      bibdk_favourite_add_favourite_to_session($branch);
    }
  }
}

function bibdk_favourite_get_forms() {
  $agencies = isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : NULL;

  if (empty($agencies)) {
    _bibdk_favourite_set_agencies();
  }
  $agencies = isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : NULL;

  if (!empty($agencies)) {
    foreach ($agencies as $id => $branch) {
      $form_ids[] = 'bibdk_favourite_' . $id;
    }
    return $form_ids;
  }
}

/**
 * the form to be displayed on profile tab
 * */
function bibdk_favourite_form_view_items_from_session($form, &$form_state, $branch) {
  $branch = unserialize($branch);
  // check if given branch is set as order-agency
  $order_class = ( isset($branch->orderLibrary) && $branch->orderLibrary == 'TRUE') ? 'order-agency' : '';

  $form['#title'] = $branch->branchName;
  $actions = bibdk_favourite_get_action_links($branch);

  $moreinfo = theme('ting_agency_more_info', array('branch' => $branch,
    'openingHours' => theme('ting_agency_opening_hours', array('branch' => $branch,)),
    'tools' => theme('ting_agency_tools', array('branch' => $branch)),
    'address' => theme('ting_agency_address', array('branch' => $branch)),
    'contact' => theme('ting_agency_contact', array('branch' => $branch)),
      )
  );
  $classes = array();
  $classes[] = 'favourite_' . $branch->branchId;
  $classes[] = ( isset($branch->orderLibrary) && $branch->orderLibrary == 'TRUE') ? 'order-agency' : NULL;

  $form[$branch->branchId]['library']['#markup'] =
      theme('ting_agency_library', array('branchName' => $branch->branchName, 'actions' => $actions, 'add_classes' => $classes, 'moreinfo' => $moreinfo, 'branchid' => $branch->branchId));

  // place branch on top if set as order-agency
  if (isset($branch->orderLibrary) && $branch->orderLibrary == 'TRUE') {
    $form[$branch->branchId]['#weight'] = -1;
  }


  return $form;
}

/*
 * Implements hook_forms.
 * drupal_get_form uses this hook if given formid is not found
 *
 * add a form for each of a users favourite agencies.
 */
function bibdk_favourite_forms($form_id) {
  // is this a bibdk_favourite form ?
  if (strpos($form_id, 'bibdk_favourite_') === 0) {
    $agencies = isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : NULL;
    if (empty($agencies)) {
      _bibdk_favourite_set_agencies();
    }

    $agencies = isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : NULL;
    foreach ($agencies as $id => $branch) {
      $forms['bibdk_favourite_' . $id] = array(
        'callback' => 'bibdk_favourite_form_view_items_from_session',
        'callback arguments' => array($branch),
      );
      $forms['bibdk_favourite_actions_' . $id] = array(
        'callback' => 'bibdk_favourite_form_elements',
        'callback arguments' => array($branch),
      );
    }
    return $forms;
  }
}

function _bibdk_favourite_set_user_data_page_title($branchid) {
  $branchName = '';
  if (isset($_SESSION['bibdk_favourites'][$branchid])) {
    $branch = unserialize($_SESSION['bibdk_favourites'][$branchid]);
    $branchName = isset($branch->branchName) ? $branch->branchName : '';
  }
  return t('Edit data for @library', array('@library' => $branchName));
}

/**
 * Render user fields;
 */
function bibdk_favourite_user_form_fields($form, &$form_state, $branchid) {
  if (!isset($_SESSION['bibdk_favourites'])) {
    // get agencies
    _bibdk_favourite_set_agencies();
  }
  // set title of page
  $page_title = _bibdk_favourite_set_user_data_page_title($branchid);
  drupal_set_title($page_title);

  $form['wrapper'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-section')),
  );

  $form['#branchid'] = array(
    '#type' => 'hidden',
    '#value' => $branchid,
  );

  if (!isset($_SESSION['bibdk_favourites'])) {
    $agencies = _bibdk_favourite_get_from_webservice();
    foreach ($agencies as $key => $value) {
      $_SESSION['bibdk_favourites'][$key] = serialize($value);
    }
  }


  if (isset($_SESSION['bibdk_favourites'][$branchid])) {
    $fields = bibdk_favourite_get_agency_fields($branchid);
    $agency = unserialize($_SESSION['bibdk_favourites'][$branchid]);
    $agency->userParameters = $fields;
    $_SESSION['bibdk_favourites'][$branchid] = serialize($agency);
  }

  if (empty($fields) || !is_object($agency)) {
    // do something
    $form['wrapper']['error'] = array('#markup' => _bibdk_favourite_error_no_agency_user_data());
    return $form;
  }

  $params = $fields->getUserParameters();
  if (empty($params)) {
    $form['wrapper']['error'] = array('#markup' => _bibdk_favourite_error_no_agency_user_data());
    return $form;
  }

  foreach ($fields->getUserParameters() as $userParameter) {
    $value = isset($agency->userdata[$userParameter['type']]) ? $agency->userdata[$userParameter['type']] : NULL;
    if (isset($userParameter['field_type']) && $userParameter['field_type'] == 'password') {
      $value = _bibdk_favourite_mask($value);
    }
    $type = $userParameter['type'];
    $form['wrapper'][$type] = array(
      //'#type' => isset($userParameter['field_type']) ? $userParameter['field_type'] : 'textfield',
      '#type' => 'textfield',
      '#title' => isset($userParameter['field_name']) ? $userParameter['field_name'] : "",
      //'#title' => $userParameter['field_name'],
      '#description' => isset($userParameter['field_description']) ? $userParameter['field_description'] : NULL,
      '#required' => $userParameter['required'],
      '#default_value' => isset($value) ? $value : "",
    );
  }

  $form['#submit'][] = 'bibdk_favourite_set_userdata';
  $form['wrapper']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/** \brief mask a string as *****
 *
 * @param type $str
 * return string masked as *******
 */
function _bibdk_favourite_mask($str) {
  $mask = preg_replace("/\S/", "*", $str);
  return substr_replace($str, $mask, 0);
}

function bibdk_favourite_set_userdata($form, $form_state) {
  $userdata = array();
  $valid_fields = array('cpr', 'pincode', 'userName', 'userAddress', 'userMail', 'userTelephone', 'barcode');
  foreach ($form_state['values'] as $key => $value) {
    if (in_array($key, $valid_fields)) {
      if (!empty($value)) {
        $userdata[$key] = $value;
      }
    }
  }
  $agencyid = $form['#branchid']['#value'];
  bibdk_favourite_save_userdata($agencyid, $userdata);
  // clear session
  if (isset($_SESSION['bibdk_favourites'])) {
    unset($_SESSION['bibdk_favourites']);
  }
}

function _bibdk_favourite_error_no_agency_user_data() {
  return t('no_agency_data_from_agency');
}

function bibdk_favourite_save_userdata($agencyid, array $userdata) {
  global $user;
  if (!ding_user_is_provider_user($user)) {
    return;
  }
  try {
    $creds = ding_user_get_creds($user);
  } catch (Exception $e) {
    // do nothing
  }
  $data = serialize($userdata);
  $response = bibdk_provider_user_save_favourite_data($creds['name'], $agencyid, $data);

  if ($response !== FALSE) {
    drupal_set_message(t('user_changes_saved', array(), array('context' => 'bibdk_favourite')));
  }
  else {
    // @TODO ... do something
  }
}

/**
 * Get fields required by Agency
 * @return \bibdkReservationUserInput
 */
function bibdk_favourite_get_agency_fields($agencyId) {
  $agency = new TingClientAgencyBranch(NULL, $agencyId);
  $fields = $agency->getAgencyFields();
  return $fields;
}

/**
 * \brief Get favourite agencies for the user
 *
 * @global type $user
 * @return TingClientAgencyBranch
 */
function _bibdk_favourite_get_from_webservice() {
  global $user;

  if (ding_user_is_provider_user($user)) {
    try {
      $creds = ding_user_get_creds($user);
    } catch (Exception $e) {
      // do nothing
    }
    if (empty($creds)) {
      return array();
    }
// call openuserinfo webservice
    // @TODO cache
    $xml = ding_provider_invoke('user', 'get_favourites', $creds['name']);
    //$xml = bibdk_provider_user_get_favourites($creds['name']);
    module_load_include('inc', 'bibdk_favourite', 'bibdk_favourite.agencies');

    $saved_agencies = bibdk_favourite_parse_agencies($xml);

    if (!$saved_agencies) {
      drupal_set_message(t('bibdk_favourite_something_went_wrong', array(), array('context' => 'bibdk_favourite')), 'error');
      return array();
    }
    // get the real agency(branch)
    $client = new ting_client_class();
    $agencies = array();
    foreach ($saved_agencies as $key => $agency) {
      $params = array('action' => 'findLibraryRequest', 'agencyId' => $agency['oui:agencyId']);
      // call openagency webservice to get full agencies
      // @TODO cache
      $result = $client->do_agency($params);
      if (isset($result->findLibraryResponse->pickupAgency)) {
        // there should be one and only one agency in result
        $obj = new TingClientAgencyBranch($result->findLibraryResponse->pickupAgency[0]);
        $obj->userdata = unserialize($saved_agencies[$key]['oui:userData']);
        $obj->orderLibrary = $saved_agencies[$key]['oui:orderAgency'];
        $agencies[$agency['oui:agencyId']] = $obj;
      }
    }
    return $agencies;
  }


  // user is not ding_provider_user
  return array();
}

/**
 * Helper function to add required javascript and CSS to the page.
 */
function bibdk_favourite_add_js() {
  // Initialize a flag; we only need to do this one per page request.
  static $done = FALSE;
  if ($done) {
    return;
  }
  // Add the requisite libraries and our custom js file.
  $js_path = drupal_get_path('module', 'bibdk_favourite') . '/js/';
  drupal_add_js($js_path . 'setFavourite.js');
  // Set flag to true.
  $done = TRUE;
}

/** \brief invoke bibdk_providers user_set_favourite method
 *
 * @global $user $user
 * @param mixed $branchId
 * @return boolean
 */
function bibdk_favourite_set_favourite($branchId) {
  global $user;

  if (ding_user_is_provider_user($user)) {
    try {
      $creds = ding_user_get_creds($user);
    } catch (Exception $e) {
      // do nothing
    }
    if (empty($creds)) {
      return FALSE;
    }
    $response = ding_provider_invoke('user', 'set_favourite', $creds['name'], $branchId);
    return $response;
  }
}

/** \brief get links for editing favourite agency (delete, set as order-agency, edit user data)
 *
 * @param type $branch
 * @return html (unordered list)
 *
 * NOTICE text and classes are also set in javascript. @see js/setFavourite.js
 */
function bibdk_favourite_get_action_links($branch) {
  bibdk_favourite_add_js();
  // add ajax library to intrepret the use-ajax class
  drupal_add_library('system', 'drupal.ajax');
  $order_agency = ( isset($branch->orderLibrary) && $branch->orderLibrary == 'TRUE') ? TRUE : FALSE;
  if( $order_agency ) {
    $order_txt = t('Order agency');
    $link_class = 'selected-agency';
  }
  else{
    $order_txt = t('set_as_favourite');
    $link_class = 'not-selected-agency';
  }

  $links = array();
  $links[] = l($order_txt, 'favourite_set/ajax/' . $branch->branchId, array('attributes' => array('class' => array('use-ajax', 'set-default-order-agency',$link_class))));
  $links[] = l(t('Edit_data'), 'overlay/favourite/userdata/' . $branch->branchId, array('attributes' => array('rel' => array('bibdkFavorite'), 'class' => array('edit-personal-info', ' bibdk-popup-link'))));
  $links[] = l(t('delete_favourite'), 'favourite_delete/ajax/' . $branch->branchId, array('attributes' => array('class' => array('use-ajax', 'delete-favourite'))));

  foreach ($links as $link) {
    $item['data'] = $link;
    $items[] = $item;
  }

  return theme('item_list', array('items' => $items));
}

/**
 * Implements hook_menu
 * BIG @TODO access check
 */
function bibdk_favourite_menu() {
  global $user;
  // form to edit favourite data
  $items['overlay/favourite/userdata/%'] = array(
    'title' => 'Edit data',
    'description' => 'Library helpdesk form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_favourite_user_form_fields', 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // ajax call for deleting a favourite
  $items['favourite_delete/ajax/%'] = array(
    'title' => 'ajax_delete_favourite',
    'page callback' => 'bibdk_favourite_ajax_link_delete_favourite',
    'page arguments' => array(2),
    // @TODO set access
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // ajax call for setting a favourite
  $items['favourite_set/ajax/%'] = array(
    'title' => 'ajax_set_favourite',
    'page callback' => 'bibdk_favourite_ajax_link_set_favourite',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function bibdk_favourite_ajax_command($branchId) {

  return array(
    'command' => 'favourite_set',
    'selector' => 'favourite_' . $branchId,
  );
}

/**
 * ajax callback for setting order agency
 */
function bibdk_favourite_ajax_link_set_favourite($branchId) {
  // add javascript for handling favourite_set
  bibdk_favourite_add_js();

  unset($_SESSION['bibdk_favourites']);

  $response = bibdk_favourite_set_favourite($branchId);
  if (!$response) {
    $text = _bibdk_favourite_set_error_text($branchId);
    $type = 'error';
  }
  else {
    $text = _bibdk_favourite_set_favourite_text($branchId);
    $type = 'status';
  }


  $commands = array();
  //clear message stack
  drupal_get_messages();
  $commands[] = bibdk_favourite_ajax_command($branchId);
  // if $response is not set something went wrong
  if (!$response) {
    drupal_set_message($text, $type);
    $commands[] = ajax_command_append($selector, theme('status_messages'));
  }
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * ajax callback for deleting a favourite library
 * */
function bibdk_favourite_ajax_link_delete_favourite($branchId) {
  $response = bibdk_favourite_delete_favourite_from_session($branchId);

  if (!$response) {
    $text = _bibdk_favourite_set_error_text($branchId);
    $type = 'error';
  }
  else {
    $text = _bibdk_favourite_set_delete_text($branchId);
    $type = 'status';
  }

  $commands = array();
  $selector = '.favourite_' . $branchId;

  // clear message stack
  drupal_get_messages();
  // set message
  drupal_set_message($text, $type);

  if ($response) {
    $commands[] = ajax_command_replace($selector, theme('status_messages'));
  }
  else {
    $commands[] = ajax_command_append($selector, theme('status_messages'));
  }

  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

function _bibdk_favourite_set_error_text($branchId) {
  return t('bibdk_favourite_something_went_wrong', array(), array('context' => 'bibdk_favourite'));
}

function _bibdk_favourite_set_favourite_text($branchId) {
  return t('Favourite library has been set', array(), array('context' => 'bibdk_favourite'));
}

function _bibdk_favourite_set_delete_text($branchId) {
  return t('Favourite library has been deleted', array(), array('context' => 'bibdk_favourite'));
}

